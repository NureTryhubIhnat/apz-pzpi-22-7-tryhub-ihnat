Міністерство освіти і науки України
Харківський національний університет радіоелектроніки







Звіт 
до практичного заняття №1 з дисципліни 
«Архітектура програмного забезпечення» 
На тему: «Патерни проєктування»







Виконав:	Перевірив:
Ст. гр. ПЗПІ-22-7 	ст. викладач кафедри ПІ
Тригуб І. О.	Сокорчук Ігор Петрович






Харків 2025
1.	ПАТЕРНИ ПРОЄКТУВАННЯ
1.1 Історія змін

Зміни в документі нотуються до таблиці 1.1.

Таблиця 1.1 – Історія змін
№	Дата	Версія звіту	Опис змін та виправлень
1	12.04.25	0.1	Створено розділ «Історія змін»
2	15.04.25	0.1	Створено розділ «Завдання до практичної роботи»
3	15.04.25	0.1	Створено розділ «Хід роботи»
4	15.04.25	0.1	Створено розділ «Висновки»
5	15.04.25	0.1	Додано додаток А з посиланням на відеоролик
6	15.04.25	0.1	Додано додаток Б зі слайдами презентації
7	15.04.25	0.1	Додано додаток В з програмним кодом

2.	Завдання
•	Вивчити патерн проєктування Bridge.
•	Створити презентацію зі структурою патерна, прикладом з UML та реального світу.
•	Реалізувати приклад патерна на Java.
•	Записати відео з поясненням презентації.
•	Підготувати звіт і додати матеріали на GitHub.
3.	Хід роботи Для виконання практичної роботи мною було обрано патерн Bridge (Міст), який належить до структурних патернів проєктування за книгою Ґамма та співавторів. Його головна мета — розділення абстракції та реалізації, що дозволяє розвивати ці частини системи незалежно одна від одної.
У процесі роботи було виконано такі етапи:
•	Ознайомився з теоретичними основами патерна: принципи його функціонування, сфери застосування, переваги та обмеження.
•	Розглянув приклади з практики та реального життя для кращого розуміння: зокрема, аналогію з рендерингом графіки через різні API (OpenGL, DirectX).
•	Створив презентацію, до складу якої увійшли:
o	Вступ до теми патернів проєктування.
o	Загальна ідея та структура патерна Bridge.
o	UML-діаграма, що ілюструє взаємодію між абстракцією та реалізацією.
o	Приклад з життя для наочного пояснення принципу.
o	Фрагмент коду на мові Java, що демонструє практичну реалізацію патерна.
o	Слайди з перевагами, недоліками та порівнянням з іншими патернами.
•	Озвучив презентацію та записав відео, у якому детально пояснюю кожен слайд українською мовою.
•	Всі матеріали було оформлено згідно з вимогами:
o	Презентацію збережено у форматі PDF.
o	Код додано у вигляді окремого файлу.
o	Відео завантажено на YouTube.
o	Усі ресурси зібрано в репозиторії на GitHub для зручного доступу перевіряючого.
4.	Висновки У результаті виконання роботи я краще зрозумів, як структурні патерни проєктування, зокрема Bridge, сприяють створенню гнучкої та масштабованої архітектури програмного забезпечення. Основні висновки:
•	Bridge-патерн дозволяє уникати надмірного розростання ієрархії класів і спрощує підтримку коду.
•	Завдяки розділенню абстракції від реалізації, можна змінювати або доповнювати одну з частин системи без втруч
ання в іншу, що є критично важливим для великих проєктів.
•	Під час виконання роботи я поглибив знання з програмної інженерії та оцінив можливості сучасних інструментів для підготовки матеріалів. Отримані знання будуть корисними у подальших проєктах, де важлива чітка архітектура та гнучкість реалізації.
 
ДОДАТОК А

Хронологічний опис та посилання
Відеозапис доповіді на YouTube: https://youtu.be/acne0UenUvE
Хронологічний опис доповіді: 
00:00 Вступна частина Представлення себе, теми презентації та короткий вступ. Розповідається про актуальність патернів проєктування та чому обрано патерн «Міст». 
00:30 Що таке патерни проєктування Опис сутності патернів як перевірених рішень для типових проблем у
розробці ПЗ. Акцент на структуризації коду. 
00:55 Загальна ідея патерна Bridge Пояснення концепції: розділення абстракції від реалізації та можливість їх незалежного розвитку. 
01:20 Проблема, яку вирішує патерн Опис проблеми надмірної складності ієрархій класів. Пояснення, як Bridge зменшує зв’язність. 
01:45 Структура патерна Bridge Розбір структури: абстракція, реалізація та механізм делегування. 
02:10 Приклад використання патерна Приклад з рендерингу графіки для різних API (OpenGL, DirectX).
 02:30 Код: базова структура Опис реалізації патерна у коді на Java. 
02:50 Переваги патерна Перелік переваг: гнучкість, незалежність, масштабованість.
 03:05 Потенційні недоліки Обговорення можливих недоліків: ускладнення структури. 
03:20 Висновки Підсумки, значення патерна для сучасних ПЗ, рекомендації щодо застосування.


ДОДАТОК Б Слайди презентації на тему «Патерн Bridge»

 
Рисунок Б.1 – Титульний слайд

 
Рисунок Б.2 – Загальна ідея патерна Bridge 
 Рисунок Б.3 –Структура патерна Bridge

 Рисунок Б.5 – Реалізація коду 

 Рисунок Б.6 – Переваги та недоліки патерна

 Рисунок Б.7 – Порівняння з іншими патернами

 Рисунок Б.8 –Висновки
 

ДОДАТОК В

Програмний код, використаний як приклад у презентації.
// Абстракція
abstract class Shape {
    protected Renderer renderer;
    public Shape(Renderer renderer) {
        this.renderer = renderer;
    }
    abstract void draw();
}

// Реалізація
interface Renderer {
    void renderShape(String shape);
}

class OpenGLRenderer implements Renderer {
    public void renderShape(String shape) {
        System.out.println("Rendering " + shape + " with OpenGL");
    }
}

class DirectXRenderer implements Renderer {
    public void renderShape(String shape) {
        System.out.println("Rendering " + shape + " with DirectX");
    }
}

// Конкретна абстракція
class Circle extends Shape {
    public Circle(Renderer renderer) {
        super(renderer);
    }
    public void draw() {
        renderer.renderShape("Circle");
    }
}

// Використання
public class Main {
    public static void main(String[] args) {
        Renderer openGL = new OpenGLRenderer();
        Renderer directX = new DirectXRenderer();
        Shape circle = new Circle(openGL);
        circle.draw(); // Виведе: Rendering Circle with OpenGL

        circle = new Circle(directX);
        circle.draw(); // Виведе: Rendering Circle with DirectX
    }
}
