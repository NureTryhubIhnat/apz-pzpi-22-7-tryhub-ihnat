Міністерство освіти і науки України
Харківський національний університет радіоелектроніки


Кафедра програмної інженерії





Звіт
З лабораторної роботи №3
З дисципліни «Архітектура програмного забезпечення»
на тему: «Розробка програмної архітектури, створення та відлагодження програмного коду веб-клієнта програмної системи»








Виконав
ст. гр. ПЗПІ-22-7
Тригуб Ігнат	Перевірив ст. викладач каф. ПІ
Сокорчук І. П.


	



Харків 2025
3 РОЗРОБКА ПРОГРАМНОЇ АРХІТЕКТУРИ, СТВОРЕННЯ ТА ВІДЛАГОДЖЕННЯ ПРОГРАМНОГО КОДУ ВЕБ-КЛІЄНТА ПРОГРАМНОЇ СИСТЕМИ

3.1 ІСТОРІЯ ЗМІН


Метою роботи є розробка  бізнес-логіки та функцій адміністрування для серверної частини програмної системи.
У цьому розділі відображено історію внесених змін до звіту, що наведено у таблиці нижче.

Таблиця 1 – Історія змін
№	Дата	Версія	Опис змін
1	29.05.2025	0.1	Створено розділ «Завдання»
2	29.05.2025	0.1	Створено розділ «Опис виконаної роботи»
3	29.05.2025	0.1	Створено розділ «Висновки»
4	29.05.2025	0.1	Додано додатки А, Б, В


3.2 ЗАВДАННЯ


3.2.1 Мета роботи: 
Розробка клієнтську front-end частину програмої системи «Health Care».

У рамках виконання цієї лабораторної роботи було поставлено завдання розробити серверну частину програмної системи HealthCare, яка призначена для моніторингу стану здоров’я користувачів за допомогою IoT-сенсорів. Система повинна забезпечувати функціональність як для звичайних користувачів, так і для адміністраторів, включаючи реєстрацію, авторизацію, прив’язку IoT-пристроїв, перегляд та аналіз зібраних даних, керування профілем користувача, а також адміністрування системи.

3.2 Реалізація математичної обробки даних
Посилання на GitHub-репозиторій:
https://github.com/your-username/healthcare-math-processing

У репозиторії реалізовано обробку показників пульсу, температури, виявлення відхилень за допомогою базових статистичних алгоритмів.

3.3 Реалізація бізнес-логіки програмної системи
Посилання на GitHub-репозиторій:
https://github.com/your-username/healthcare-backend

Реалізовано REST API на Node.js/Express для взаємодії з клієнтом, зберігання даних у MongoDB, а також маршрутизацію, автентифікацію тощо.

3.4 Реалізація резервного копіювання
Посилання на GitHub-репозиторій:
https://github.com/your-username/healthcare-backup

Містить bash-скрипти та інструкцію з автоматизації резервного копіювання бази даних MongoDB за допомогою mongodump та cron.

Виправлення пункту 3.5: Діаграми
Рисунок Б.1 — ER-діаграма даних
(можеш вставити згенеровану діаграму у вигляді зображення або схеми, наприклад:)


Опис: зв’язки між сутностями користувачів, пристроїв та вимірювань.

Рисунок Б.2 — Структура бази даних
plaintext
Копировать
Редактировать
User
 ├─ _id: ObjectId
 ├─ name: String
 ├─ email: String
 ├─ password: String
 └─ createdAt: Date

Measurement
 ├─ _id: ObjectId
 ├─ userId: ObjectId (ref: User)
 ├─ heartRate: Number
 ├─ temperature: Number
 └─ timestamp: Date

Device
 ├─ _id: ObjectId
 ├─ userId: ObjectId (ref: User)
 ├─ deviceId: String
 └─ status: String
Можеш намалювати в Draw.io або dbdiagram.io і додати як зображення.

Рисунок Б.3 — UML-діаграма прецедентів
(приклад — намалювати або вставити як зображення):


Актори: Користувач, Система
Прецеденти: авторизація, перегляд показників, підключення пристрою, збереження даних.


3.3	ОПИС ВИКОНАНОЇРОБОТИ


3.3.1 Розробка Use Case діаграми

Під час виконання лабораторної роботи була розроблена Use Case діаграма, яка відображає взаємодію акторів із системою HealthCare. На діаграмі представлені два основні актори: Користувач та Адміністратор.
•	Користувач може виконувати такі дії: реєструватися, авторизуватися, додавати та налаштовувати IoT-пристрої, переглядати дані про стан здоров’я (наприклад, частоту серцебиття, температуру тіла, рівень кисню в крові), а також отримувати сповіщення щодо погіршення стану або необхідності медичного втручання.
•	Адміністратор має розширені повноваження, зокрема: керування обліковими записами користувачів (активація/деактивація, зміна ролей), перегляд загальної аналітики системи, резервне копіювання бази даних та контроль за працездатністю серверної частини.
Use Case діаграму можна переглянути в додатку Б.

3.3.2 Розробка діаграми компонентів

Була розроблена діаграма компонентів, яка ілюструє основні модулі веб-частини системи . На діаграмі зображено такі компоненти:
•	Реєстрація та авторизація: Забезпечує створення облікових записів та вхід у систему.
•	Управління транспортними засобами: Дозволяє додавати, видаляти та переглядати транспортні засоби.
•	Управління даними IoT: Відображає дані з IoT-пристроїв у реальному часі.
•	Адміністративне керування: Надає інструменти для управління користувачами та системою загалом.
Діаграму компонентів можна переглянути в додатку Б.

3.3.3 Створення діаграми взаємодії

Була розроблена діаграма взаємодії, яка демонструє послідовність дій адміністратора в веб-частині системи HealthCare. На діаграмі показано, як адміністратор авторизується, переглядає список користувачів, змінює їхні ролі або видаляє їх, а також взаємодіє з сервером для оновлення даних. Діаграму взаємодії можна переглянути в додатку Б.

3.3.4 Створення діаграми діяльності

Під час виконання лабораторної роботи була розроблена діаграма діяльності, яка ілюструє процес роботи користувача в системі HealthCare. На діаграмі показано послідовність дій: реєстрація, авторизація, додавання транспортного засобу та перегляд даних з IoT-пристроїв. Діаграму діяльності можна переглянути в додатку Б.

3.3.5 Створення веб-частини програмної системи

Була розроблена веб-частина програмної системи HealthCare, яка включає наступну функціональність:
•	Реєстрація та авторизація: Реалізовані за допомогою компонентів Register.js та Login.js, які дозволяють користувачам створювати облікові записи та входити в систему.
•	Дашборд користувача: Реалізований у Dashboard.js, де користувачі можуть додавати/видаляти транспортні засоби, переглядати дані IoT (тиск у шинах, напруга батареї, товщина гальмівних колодок) та історію технічного обслуговування.
•	Навігаційна панель: Реалізована в Navbar.js, забезпечує перехід між сторінками та вихід із системи.
•	Адміністративна панель: Реалізована в AdminPanel.js, дозволяє адміністраторам керувати користувачами (зміна ролей, видалення), переглядати статистику системи та список усіх транспортних засобів.
Частину коду можна переглянути в додатку В. Веб-частина розроблена з використанням React та Axios для взаємодії з сервером.


3.4. ВИСНОВКИ


Під час виконання цієї лабораторної роботи було розроблено веб-частину для програмної системи HealthCare, яка відповідає темі моніторингу стану автомобілів. Було створено UML-діаграми (Use Case, компонентів, взаємодії, діяльності), що візуалізують архітектуру та взаємодію компонентів системи. Веб-частина забезпечує зручну функціональність для користувачів (керування транспортними засобами, перегляд IoT-даних) та адміністраторів (управління користувачами та системою). Робота виконана успішно, а система готова до подальшого розвитку.
 
ДОДАТОК А

Посилання на відеозапис доповіді та хронологічний опис
Відеозапис доповіді на YouTube: https://youtu.be/HJdZNyBagwg
Хронологічний опис:
00:00 – початок
00:16 – Dashboard
00:35 - Health Tips
00:50 - Appointments
01:30 – Contact
01:50 - Start Monitoring
02:10 - See Demo  
ДОДАТОК Б
Графічні матеріали

 
Рисунок Б.1 – Use Case діаграма

 
Рисунок Б.2 – Діаграма компонентів
 

Рисунок Б.3 – Діаграма взаємодії

Рисунок Б.4 – Діаграма діяльності
 
ДОДАТОК В
Програмний код авторизації веб-частини
В.1 Реєстрація
GitHub репозиторій: https://github.com/NureTryhubIhnat/apz-pzpi-22-7-tryhub-ihnat/blob/main/Lab3/pzpi-22-7-tryhub-ihnat-lab3/src/components/Register.js


 1  import { useState } from 'react';
 2  import axios from 'axios';
 3  import { useNavigate } from 'react-router-dom';
 4  
 5  const Register = ({ setUser }) => {
 6    const [name, setName] = useState('');
 7    const [email, setEmail] = useState('');
 8    const [password, setPassword] = useState('');
 9    const [error, setError] = useState('');
10    const navigate = useNavigate();
11  
12    const handleSubmit = async (e) => {
13      e.preventDefault();
14      try {
15        await axios.post('http://localhost:5000/api/register', { name, email, password });
16        const res = await axios.post('http://localhost:5000/api/login', { email, password }, { withCredentials: true });
17        setUser({ role: res.data.user.role });
18        navigate('/dashboard');
19      } catch (err) {
20        setError(err.response?.data?.message || 'Registration failed');
21      }
22    };
23  
24    return (
25      <div className="max-w-md mx-auto mt-10 p-6 bg-white rounded shadow">
26        <h2 className="text-2xl font-bold mb-4">Register</h2>
27        {error && <p className="text-red-500 mb-4">{error}</p>}
28        <form onSubmit={handleSubmit}>
29          <div className="mb-4">
30            <label className="block mb-1">Name</label>
31            <input
32              type="text"
33              value={name}
34              onChange={(e) => setName(e.target.value)}
35              className="w-full p-2 border rounded"
36              required
37            />
38          </div>
39          <div className="mb-4">
40            <label className="block mb-1">Email</label>
41            <input
42              type="email"
43              value={email}
44              onChange={(e) => setEmail(e.target.value)}
45              className="w-full p-2 border rounded"
46              required
47            />
48          </div>
49          <div className="mb-4">
50            <label className="block mb-1">Password</label>
51            <input
52              type="password"
53              value={password}
54              onChange={(e) => setPassword(e.target.value)}
55              className="w-full p-2 border rounded"
56              required
57            />
58          </div>
59          <button type="submit" className="w-full bg-blue-500 text-white p-2 rounded hover:bg-blue-600">
60            Register
61          </button>
62        </form>
63      </div>
64    );
65  };
66  
67  export default Register;
