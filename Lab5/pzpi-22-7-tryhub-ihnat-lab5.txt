
Міністерство освіти і науки України
Харківський національний університет радіоелектроніки


Кафедра програмної інженерії






Звіт
З лабораторної роботи №5
З дисципліни «Архітектура програмного забезпечення»
на тему: «Розгортання програмної системи та демонстрація її роботи»






Виконавець:		
ст. гр. ПЗПІ-22-7						                    Тригуб І. О. 

Перевірив:		
ст. викладач кафедри ПІ				                    Сокорчук І. П. 
	




Харків 2025
 
5 РОЗГОРТАННЯ ПРОГРАМНОЇ СИСТЕМИ ТА ДЕМОНСТРАЦІЯ ЇЇ РОБОТИ
5.1 ІСТОРІЯ ЗМІН

Зміни в документі нотуються до таблиці 4.1.

Таблиця 5.1 – Історія змін
№	Дата	Версія звіту	Опис змін та виправлень
1	03.06.2025	0.1	Створено розділ «Історія змін»
2	03.06.2025	0.1	Створено розділ «Завдання»
3	03.06.2025	0.1	Створено розділ «Опис виконаної роботи»
4	03.06.2025	0.1	Створено розділ «Висновки»
5	03.06.2025	0.1	Додано додаток А з посиланням на відеоролик
6	03.06.2025	0.1	Додано додаток Б зі специфікацією API


5.2 ЗАВДАННЯ


Метою виконання цього завдання є повноцінне розгортання та інтеграція всіх ключових компонентів програмної системи HealthCare, а також демонстрація її функціональності в реальних умовах. Система HealthCare розроблена для моніторингу стану здоров’я користувачів за допомогою IoT-пристроїв та своєчасного інформування про зміни у фізіологічних показниках. Вона складається з чотирьох основних модулів: серверної частини, веб-інтерфейсу, мобільного застосунку та IoT-підсистеми, яка базується на сенсорах, інтегрованих із системою. Основна ціль полягає в забезпеченні безперервної та узгодженої роботи всіх цих компонентів для гарантованого точного та своєчасного збору, обробки і відображення медичних даних користувачів у режимі реального часу.

5.3 ОПИС ВИКОНАНОЇРОБОТИ


Програмна система HealthCare побудована на основі багаторівневої архітектури, що включає серверну частину, веб-інтерфейс, мобільний додаток та IoT-підсистему. Всі компоненти розроблені з використанням сучасних технологій, що забезпечують стабільність, масштабованість і зручність для користувачів.
Серверна частина
•	Технології: Node.js, Express.js, MongoDB
•	Опис: Серверна частина реалізована на платформі Node.js із фреймворком Express.js, що гарантує високу продуктивність і легкість розгортання. Для зберігання медичних даних використовується NoSQL база даних MongoDB, оптимальна для роботи з неструктурованою інформацією від IoT-сенсорів. Сервер надає RESTful API для взаємодії з веб- та мобільним клієнтами, а також обробки даних, отриманих від IoT-пристроїв через протокол MQTT. Для автентифікації користувачів застосовується JSON Web Tokens (JWT).
•	Розгортання: Щоб запустити серверну частину, потрібно клонувати репозиторій, виконати npm install для встановлення залежностей, налаштувати підключення до MongoDB у файлі конфігурації (.env), після чого запустити сервер командою npm start. Сервер доступний за адресою localhost:5000.
Веб-інтерфейс
•	Технології: React, Tailwind CSS, Axios
•	Опис: Веб-інтерфейс створено з використанням React та Tailwind CSS для адаптивного та сучасного дизайну. Користувачі можуть реєструватися, авторизуватися, переглядати свої медичні дані з IoT-сенсорів у реальному часі, а також отримувати сповіщення про зміни стану здоров’я. Взаємодія з сервером здійснюється через HTTP-запити за допомогою бібліотеки Axios.
•	Розгортання: Клонуйте репозиторій, виконайте npm install для встановлення залежностей, після чого запустіть проєкт командою npm start. Веб-інтерфейс буде доступний за адресою localhost:3000.
Ось адаптований текст під твій проект HealthCare:
Мобільний додаток
•	Технології: Kotlin, Android Studio, Retrofit
•	Опис: Мобільний додаток розроблено на Kotlin із застосуванням архітектури MVVM. Функціонал додатку відповідає веб-інтерфейсу: користувачі можуть реєструватися, авторизуватися, переглядати дані зі своїх IoT-сенсорів, отримувати сповіщення про стан здоров’я. Для мережевих запитів використовується бібліотека Retrofit, а відображення даних здійснюється через LiveData та ViewModel, що забезпечує реактивність і плавність інтерфейсу.
•	Розгортання: Клонуйте репозиторій, відкрийте проєкт у Android Studio, підключіть Android-пристрій або запустіть емулятор, зберіть і запустіть додаток.
IoT-підсистема
•	Технології: Реальні сенсори (наприклад, пульсометр, датчик температури, датчик руху), Arduino IDE, ESP8266, MQTT
•	Опис: IoT-підсистема базується на реальних сенсорах, розроблених власноруч. Сенсори підключені до мікроконтролера ESP8266, який запрограмовано через Arduino IDE із використанням бібліотек ESP8266WiFi та PubSubClient. Дані зі сенсорів (наприклад, пульс, температура тіла, рух) зчитуються з аналогових чи цифрових входів ESP8266, обробляються (перевірка на аномалії) і передаються на сервер через протокол MQTT. Для тестування використовувалась платформа Wokwi, що дозволила емуляцію роботи датчиків до їх фізичної реалізації.
•	Розгортання: Клонуйте репозиторій із кодом для IoT-пристрою, відкрийте його в Arduino IDE, налаштуйте параметри Wi-Fi і MQTT-брокера у коді, завантажте прошивку на ESP8266. Для тестування можна запустити емуляцію на Wokwi.
Взаємодія компонентів
•	IoT-підсистема зчитує дані з сенсорів і передає їх на сервер через MQTT-брокер.
•	Сервер отримує дані через MQTT, обробляє їх (перевірка на коректність) і зберігає у базі MongoDB.
•	Веб-інтерфейс і мобільний додаток отримують актуальні дані з сервера через REST API та відображають їх користувачу в режимі реального часу.
•	Користувачі можуть переглядати стан свого здоров’я (пульс, температура, активність) і отримувати сповіщення про потенційні проблеми.
Використані інструменти та технології
•	Сервер: Node.js, Express.js, MongoDB, MQTT
•	Веб-клієнт: React, Tailwind CSS, Axios
•	Мобільний додаток: Kotlin, Android SDK, Retrofit
•	IoT: Arduino IDE, ESP8266, MQTT, реальні сенсори (пульсометр, датчик температури, руху)
•	Інші: Git для контролю версій, Postman для тестування API, Wokwi для емуляції IoT-пристрою


5.4 ВИСНОВКИ


У результаті виконаної роботи було успішно розгорнуто та протестовано програмну систему HealthCare, яка включає серверну частину, веб-інтерфейс, мобільний додаток та IoT-підсистему з реальними сенсорами, розробленими мною самостійно. Система демонструє високу функціональність і практичну цінність, забезпечуючи комплексний моніторинг стану здоров’я користувачів у реальному часі та своєчасне надсилання сповіщень про потенційні відхилення чи проблеми.
Завдяки інтеграції власноруч створених сенсорів, система HealthCare забезпечує точний моніторинг ключових параметрів, таких як пульс, температура тіла та рівень активності. Це дозволяє користувачам оперативно реагувати на зміни у стані здоров’я, що суттєво підвищує ефективність профілактики і догляду. Розробка власних сенсорів підтвердила їхню надійність і масштабованість, відкриваючи можливості для подальшого розширення функціоналу системи.
Отже, проєкт HealthCare не лише виконав поставлені завдання, а й заклав міцну основу для майбутніх інновацій у сфері моніторингу здоров’я та персоналізованого медичного догляду.
 
ДОДАТОК А
Посилання на відеозапис доповіді та хронологічний опис

Відеозапис доповіді на YouTube: 
Хронологічний опис:
00:00 - Вступ
00:11 - Початок запуску мобільного додатку
00:34 - Відкриття проекту в Android Studio
00:52 - Налаштування емулятора
01:12 - Згадка бібліотек для мобільного додатку
01:34 - Запуск мобільного додатку
01:50 - Перехід до веб-сайту
02:16 - Установка залежностей для веб-сайту
02:35 - Налаштування змінних середовища
02:54 - Запуск серверної частини
03:18 - Налаштування IoT (опціонально)
03:24 - Запуск веб-клієнта
03:35 - Завершення 
ДОДАТОК Б
Специфікація АРІ

API Документація для проєкту
«Програмна система моніторингу стану здоров’я користувачів – HealthCare»
Загальна інформація
Базовий URL: https://api.healthcare.com/v1
Формат відповіді: JSON
Аутентифікація: JWT Token
Кодування: UTF-8
Аутентифікація
Реєстрація користувача
POST /auth/register
Тіло запиту:
{
    "email": "user@example.com",
    "password": "password123",
    "firstName": "Олена",
    "lastName": "Ковальчук",
    "phone": "+380501234567"
}
Успішна відповідь (201 Created):
{
    "status": "success",
    "message": "Користувача успішно зареєстровано",
    "data": {
        "userId": "u12345",
        "email": "user@example.com",
        "firstName": "Олена",
        "lastName": "Ковальчук"
    }
}
Авторизація користувача
POST /auth/login
Тіло запиту:
{
    "email": "user@example.com",
    "password": "password123"
}
Успішна відповідь (200 OK):
{
    "status": "success",
    "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
    "refreshToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
}
Управління профілем пацієнта
Додавання або оновлення профілю
POST /profile
Заголовки:
Authorization: Bearer <your_jwt_token>
Тіло запиту:
{
    "age": 29,
    "gender": "female",
    "height": 170,
    "weight": 65,
    "medicalConditions": ["hypertension", "asthma"]
}
Успішна відповідь (200 OK):
{
    "status": "success",
    "message": "Профіль успішно збережено"
}
Дані зі здоров’я
Додавання IoT-показників
POST /health-data
Заголовки:
Authorization: Bearer <your_jwt_token>
Тіло запиту:
{
    "timestamp": "2025-06-03T10:45:00Z",
    "pulse": 72,
    "temperature": 36.6,
    "steps": 1200
}
Успішна відповідь (201 Created):
{
    "status": "success",
    "message": "Дані здоров’я успішно збережено"
}
Отримання історії показників
GET /health-data
Заголовки:
Authorization: Bearer <your_jwt_token>
Успішна відповідь (200 OK):
{
    "status": "success",
    "data": {
        "entries": [
            {
                "timestamp": "2025-06-03T10:45:00Z",
                "pulse": 72,
                "temperature": 36.6,
                "steps": 1200
            },
            {
                "timestamp": "2025-06-02T09:30:00Z",
                "pulse": 78,
                "temperature": 36.7,
                "steps": 850
            }
        ]
    }
}
Моніторинг даних датчиків
Отримання даних з IoT-сенсорів користувача
GET /iot/data
Заголовки:
Authorization: Bearer <your_jwt_token>
Параметри запиту:
{
    "userId": "u12345"
}
Успішна відповідь (200 OK):
{
    "status": "success",
    "data": {
        "pulse": {
            "value": 72,
            "unit": "bpm",
            "timestamp": "2025-06-03T10:00:00Z"
        },
        "temperature": {
            "value": 36.6,
            "unit": "°C",
            "timestamp": "2025-06-03T10:00:00Z"
        },
        "steps": {
            "value": 1340,
            "unit": "count",
            "timestamp": "2025-06-03T10:00:00Z"
        }
    }
}
Відправка даних з сенсорів (для IoT-пристрою)
POST /iot/data
Тіло запиту:
{
    "userId": "u12345",
    "sensorType": "pulse",
    "value": 72,
    "unit": "bpm",
    "timestamp": "2025-06-03T10:00:00Z"
}
Успішна відповідь (201 Created):
{
    "status": "success",
    "message": "Дані успішно збережено"
}
Сповіщення
Отримання сповіщень
GET /notifications
Заголовки:
Authorization: Bearer <your_jwt_token>
Параметри запиту:
{
    "userId": "u12345",
    "status": "unread"
}
Успішна відповідь (200 OK):
{
    "status": "success",
    "data": {
        "notifications": [
            {
                "notificationId": "n12345",
                "userId": "u12345",
                "type": "pulse",
                "message": "Підвищений пульс – 98 bpm",
                "severity": "warning",
                "createdAt": "2025-06-03T10:01:00Z",
                "status": "unread"
            }
        ]
    }
}
коди помилок
код 400 – неправильний запит
код 401 – не авторизовано
код 403 – доступ заборонено
код 404 – ресурс не знайдено
код 422 – помилка валідації даних
код 500 – внутрішня помилка сервера
розгортання
вимоги до системи
серверна частина: node.js 16+, mongodb 5.0+, mqtt брокер (наприклад, mosquitto), redis (опціонально)
iot-пристрій: esp8266 з медичними сенсорами (пульс, температура, кроки) або емулятор wokwi
веб-клієнт: node.js 16+, браузер (chrome, firefox)
мобільний додаток: android studio, android sdk 31+
змінні середовища
створити файл .env у корені серверної частини з такими параметрами:
PORT=5000
MONGODB_URI=mongodb://localhost:27017/healthcare
JWT_SECRET=your_jwt_secret_key
MQTT_BROKER_URL=mqtt://localhost:1883
SMTP_HOST=smtp.example.com
SMTP_PORT=587
SMTP_USERNAME=your_smtp_username
SMTP_PASSWORD=your_smtp_password
REDIS_URL=redis://localhost:6379
кроки розгортання
1.	клонування репозиторію
git clone https://github.com/your-username/healthcare-backend.git
cd healthcare-backend
2.	встановлення залежностей
npm install
3.	налаштування змінних середовища
скопіювати .env.example до .env і заповнити своїми значеннями
4.	запуск сервера
npm start
docker розгортання
docker build -t healthcare .

docker run -d \
  -p 5000:5000 \
  --name healthcare \
  --env-file .env \
  healthcare
налаштування iot-пристрою
1.	підготовка arduino ide
встановити arduino ide
додати підтримку esp8266
встановити бібліотеки esp8266wifi і pubsubclient
2.	налаштування прошивки
відкрити код прошивки в arduino ide
вказати параметри wi-fi та mqtt
завантажити прошивку на esp8266
3.	підключення датчиків
датчик пульсу → a0
датчик температури → a1
лічильник кроків або акселерометр → a2
4.	тестування в wokwi (опціонально)
створити проект на wokwi
імпортувати код
додати віртуальні датчики
запустити емуляцію
безпека
всі запити до api захищені jwt
паролі хешуються через bcrypt
використовувати https у production
впроваджено rate limiting
обмежити доступ до mqtt через firewall
додати cors політики
моніторинг та логування
prometheus – збір метрик
grafana – візуалізація
elk stack – логування подій і помилок

